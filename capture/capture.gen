/*/ Copyright (c) 2014, LAAS/CNRS
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, 
 *    this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, 
 *    this list of conditions and the following disclaimer in the documentation 
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "captureStruct.idl"
#include "captureinterface.gen"

component capture {
    version     "1.1";
    lang        "c";
    require     "genom3 >= 2.99.24";
    provides    captureinterface;

    /* ---Exceptions declaration--- */
    exception INVALID_CHUNK_TIME;
    exception ERROR_SEQUENCE_ENOMEM;

    /* ---IDS declaration--- */
    native alsaParams_t;
    ids {
        string              device;
        unsigned long       transfer_rate;
        unsigned long       chunk_time;
        unsigned long       Port_chunks;
        alsaParams_t        params;
        capture::chunk_t    current_chunk;        
    };

    /* ---Task declaration--- */
    task retrieve_data {

        codel <start>   start_retrieve_data(inout ::ids) yield ether;
        codel <stop>    stop_retrieve_data(inout ::ids) yield ether;
    };

    task socket {
        period      5ms;
        priority    200;
        stack       4000;

        codel <start>   sInitModule() yield ether;
    };

    /* ---Services declaration--- */
    activity StartCapture(
        in string device =                  "hw:1,0"    : "Name of the sound device",
        in unsigned long transfer_rate =    44100       : "Sample rate in Hz",
        in unsigned long chunk_time =       50          : "Size of transfer chunks in milliseconds",
        in unsigned long Port_chunks =      20          : "Size of the port in number of chunks") {

        task    retrieve_data;
        throw INVALID_CHUNK_TIME, ERROR_SEQUENCE_ENOMEM;
        validate controlChunkTime(local in transfer_rate, local in chunk_time);

        codel <start> scStart(inout ::ids, local in device,
                              local in transfer_rate, local in chunk_time, 
                              local in Port_chunks, port out Audio)
                              yield exec, ether;
        async codel <exec> scExec(inout ::ids, port out Audio) yield exec, stop;
        codel <stop> scStop(inout ::ids) yield ether;
    };

    function StopCapture() {
        interrupts StartCapture;
    };

    attribute GetCaptureConfig(out device, out transfer_rate, 
                               out chunk_time, out Port_chunks);

    activity DedicatedSocket() {
        codel <start>           initModule() yield ether, recv;
        async codel <recv>      Transfer(in ::ids, port in Audio) yield recv, ether;

        task    socket;
	};

    activity CloseSocket(){
        codel <start>           closeSocket() yield ether;
        task socket;
    };
};
